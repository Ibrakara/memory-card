{"version":3,"sources":["components/MemoryCard.js","components/Counter.js","styles/sounds/UCL_theme.mp3","App.js","index.js"],"names":["MemoryCard","props","teamLogoImgSrc","teamLogo","teamLogoImgID","teamId","teamName","handlePickedLogos","className","data-id","onClick","src","alt","id","Counter","maxScore","playerScore","App","useState","allTeamsLogos","setAllTeamsLogos","shownLogos","setShownLogos","isLogosLoaded","setIsLogosLoaded","pickedLogos","setPickedLogos","numberOfLogosPresented","setNumberOfLogosPresented","isPlayerFailed","setIsPlayerFailed","setMaxScore","setPlayerScore","useEffect","fetch","then","data","json","response","teams","map","team","idTeam","strTeam","strTeamBadge","teamInfo","setNewShownLogosArr","shuffle","array","newArr","sort","Math","random","length","newshownLogos","newshownLogosArr","slice","setTimeout","prevState","newAudio","Audio","themeSong","volume","loop","play","event","newPickedLogoArr","logoId","currentTarget","dataset","newPickedLogo","find","elem","isItClickedBefore","includes","index","numberOfPresentedPlaceholders","placeHolderLogos","i","push","width","height","frameBorder","createPlaceholderLogos","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c9c111d.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction MemoryCard(props) {\n  const teamLogoImgSrc = props.teamLogo;\n  const teamLogoImgID = props.teamId;\n  const teamName = props.teamName;\n  const handlePickedLogos = props.handlePickedLogos;\n\n  return (\n    <div\n      className=\"img-div\"\n      data-id={teamLogoImgID}\n      onClick={handlePickedLogos}\n    >\n      <img src={teamLogoImgSrc} alt=\"team logo\" className=\"img\" />\n      <p id=\"team-name\">{teamName}</p>\n    </div>\n  );\n}\n\nexport default MemoryCard;\n","import React from \"react\";\n\nfunction Counter(props) {\n  const maxScore = props.maxScore;\n  const playerScore = props.playerScore;\n  return (\n    <header className=\"header\">\n      <div className=\"counter-element\">\n        <p id=\"player-score\">Player Score: {playerScore}</p>\n      </div>\n      <div className=\"counter-element\">\n        <p id=\"max-score\">Maximum Score: {maxScore}</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Counter;\n","export default __webpack_public_path__ + \"static/media/UCL_theme.11da5f78.mp3\";","import React, { useState, useEffect } from \"react\";\nimport MemoryCard from \"./components/MemoryCard\";\nimport Counter from \"./components/Counter\";\n\nimport themeSong from \"./styles/sounds/UCL_theme.mp3\";\n\nfunction App() {\n  const [allTeamsLogos, setAllTeamsLogos] = useState([]);\n  const [shownLogos, setShownLogos] = useState([]);\n  const [isLogosLoaded, setIsLogosLoaded] = useState(false);\n  const [pickedLogos, setPickedLogos] = useState([]);\n  const [numberOfLogosPresented, setNumberOfLogosPresented] = useState(0);\n  const [isPlayerFailed, setIsPlayerFailed] = useState(false);\n  const [maxScore, setMaxScore] = useState(0);\n  const [playerScore, setPlayerScore] = useState(0);\n  useEffect(() => {\n    fetch(\n      \"https://www.thesportsdb.com/api/v1/json/1/search_all_teams.php?l=UEFA_Champions_League\"\n    )\n      .then((data) => {\n        return data.json();\n      })\n      .then((response) => {\n        const teamInfo = response.teams.map((team) => {\n          return {\n            teamId: team.idTeam,\n            teamName: team.strTeam,\n            teamLogo: team.strTeamBadge,\n          };\n        });\n        return teamInfo;\n      })\n      .then((teamInfo) => {\n        setAllTeamsLogos(teamInfo);\n        setNumberOfLogosPresented(4);\n        setIsLogosLoaded(true);\n        setNewShownLogosArr();\n      });\n  }, []);\n  const shuffle = (array) => {\n    const newArr = [...array];\n    newArr.sort(() => Math.random() - 0.5);\n    return newArr;\n  };\n  useEffect(() => {\n    //This is shuffling current round logos every time on a click of an image\n    if (shownLogos.length >= 4) {\n      const newshownLogos = shuffle(shownLogos);\n      setShownLogos(newshownLogos);\n    }\n  }, [pickedLogos.length]);\n  const setNewShownLogosArr = () => {\n    if (numberOfLogosPresented > 0) {\n      const allTeamsLogosShuffled = shuffle(allTeamsLogos);\n      const newshownLogosArr = allTeamsLogosShuffled.slice(\n        0,\n        numberOfLogosPresented\n      );\n      setShownLogos(newshownLogosArr);\n      setIsLogosLoaded(false);\n    }\n  };\n  useEffect(() => {\n    //This is creating next level of logos after selecting all logos correctly\n    setNewShownLogosArr();\n    setPickedLogos([]);\n    setTimeout(() => {\n      setIsLogosLoaded(true);\n    }, 1000);\n  }, [numberOfLogosPresented]);\n\n  useEffect(() => {\n    if (pickedLogos.length === numberOfLogosPresented) {\n      setNumberOfLogosPresented((prevState) => {\n        const nextLevelStep = 2; //2 is arbitrary number for an increased number of next level\n        const numberOfNextLevelLogos = prevState + nextLevelStep;\n        return numberOfNextLevelLogos;\n      });\n      setPickedLogos([]);\n    } else if (isPlayerFailed) {\n      setNumberOfLogosPresented(4);\n      setIsPlayerFailed(false);\n    }\n  }, [playerScore]);\n  useEffect(() => {\n    const newAudio = new Audio(themeSong);\n    newAudio.volume = 0.05;\n    newAudio.loop = true;\n    setTimeout(() => {\n      newAudio.play();\n    }, 4000);\n  }, []);\n  const handlePickedLogos = (event) => {\n    const { dataset } = event.currentTarget;\n    const logoId = dataset.id;\n    const newPickedLogo = shownLogos.find((elem) => {\n      return logoId === elem.teamId;\n    });\n    let isItClickedBefore = pickedLogos.includes(newPickedLogo);\n    setIsPlayerFailed(isItClickedBefore);\n    let newPickedLogoArr;\n    if (isItClickedBefore) {\n      newPickedLogoArr = [];\n      if (playerScore > maxScore) {\n        setMaxScore(playerScore);\n      }\n      setPlayerScore(0);\n    } else {\n      newPickedLogoArr = [...pickedLogos, newPickedLogo];\n      setPlayerScore((prevState) => prevState + 1);\n    }\n    setPickedLogos(newPickedLogoArr);\n  };\n\n  const createPlaceholderLogos = () => {\n    const placeHolderLogos = [];\n    let numberOfPresentedPlaceholders;\n    numberOfLogosPresented === 0\n      ? (numberOfPresentedPlaceholders = 4)\n      : (numberOfPresentedPlaceholders = numberOfLogosPresented);\n    for (let i = 0; i < numberOfPresentedPlaceholders; i++) {\n      placeHolderLogos.push(\n        <div className=\"img-div\" key={i}>\n          <img\n            src=\"http://www.yeksun.com.tr/images/download.gif\"\n            width=\"100\"\n            height=\"auto\"\n            frameBorder=\"0\"\n            alt=\"placeholder gif\"\n          />\n        </div>\n      );\n    }\n    return placeHolderLogos;\n  };\n  let memoryCardArray = [];\n  const createMemoryCardArray = () => {\n    memoryCardArray = shownLogos.map((elem, index) => {\n      return (\n        <MemoryCard\n          key={index}\n          teamLogo={elem.teamLogo}\n          teamId={elem.teamId}\n          teamName={elem.teamName}\n          handlePickedLogos={handlePickedLogos}\n        />\n      );\n    });\n    return memoryCardArray;\n  };\n\n  return (\n    <div className=\"App\">\n      <Counter playerScore={playerScore} maxScore={maxScore} />\n      <div className=\"img-container\">\n        {isLogosLoaded ? createMemoryCardArray() : createPlaceholderLogos()}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./styles/App.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}